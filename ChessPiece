package chess;

public abstract class ChessPiece implements IChessPiece {

  private Player owner;
  protected ChessPiece(Player player) {
    this.owner = player;
  }

  public abstract String type();
  
  public Player player() {
    return this.owner;
  }

  public boolean isValidMove(Move move, IChessPiece[][] board) {
  	//move is board[row][col]
	   //Spencer 1. each move must involve two different squares (the from and the to must be different)
	   if(move(fromRow, fromColumn) == move(toRow, toColumn))
	   	return false;
	   //Spencer 2. the "from" square must contain a chess piece (the board space is != null)
	   else if(move(fromRow, fromColumn) == null)
	   	return false;
	   
	   Aaron//3. the "to" square has to be empty or contains the opposite player's piece
	   if(board[move.toRow][move.toColumn] != null && board[move.toRow][move.toColumn].player() != this.owner)
	   	return false;
		
	return true;
  }
  
  //Optional, I'll do it
  boolean moveIsOnlyOverEmptySquares( Move move, IChessPiece[][] board){
  	Aaron
  }
}
