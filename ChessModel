package chess;

public class ChessModel implements IChessModel{

   private IChessPiece[][] board;
   private Player player;
   
   // declare other instance variables as needed

   public ChessModel() {
      //Instantiate and create the board
      board = new IChessPiece[8][8];
      player = PLAYER.White;
   }
   
   public boolean gameOver( ) {
      return false;
   }
   public boolean isValidMove(Move move) {
      //If the board space isn't null, return the isValidMove of the piece at the fromSpace of the move.
      if(board[move.fromRow][move.toRow] == null)
         return false;
      return board[move.fromRow][move.fromColumn].isValidMove(move, board);
   }
   
   public void move(Move move) {
      // take the piece from the "from" square, make the "from" square null, and move it to the "to" square
      //NOTE: IDK if we need to check if its valid first, for now I'll assume it should be
      if(isValidMove(move)){
         board[move.toRow][move.toColumn] = board[move.fromRow][move.fromColumn];
         board[move.fromRow][move.fromColumn] = null;
      }
       // complete this
   }
  public boolean inCheck(Player p) {
       return false;
   }
   public Player currentPlayer() {
       return player;
   }
   public int numRows() {
       return 8;
   }
   public int numColumns() {
       return 8;
   }
   public IChessPiece pieceAt(int row, int col) {
       //return the index of the board at the given coordinates
       return board[row][col];
   }

   // add other public or helper methods as needed

}

