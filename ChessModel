package chess;

public class ChessModel implements IChessModel{

   private IChessPiece[][] board;
   private Player player;
   
   // declare other instance variables as needed

   public ChessModel() {
      //Instantiate and create the board
      board = new IChessPiece[8][8];
      player = PLAYER.White;
   }
   
   public boolean gameOver( ) {
      return false;
   }
   
   public boolean isValidMove(Move move) {
      //If the board space isn't null, return the isValidMove of the piece at the fromSpace of the move.
      if(board[move.fromRow][move.toRow] == null)
         return false;
      return board[move.fromRow][move.fromColumn].isValidMove(move, board);
   }
   
   public void move(Move move) {
      // take the piece from the "from" square, make the "from" square null, and move it to the "to" square
      //NOTE: IDK if we need to check if its valid first, for now I'll assume it should be
      if(isValidMove(move)){
         board[move.toRow][move.toColumn] = board[move.fromRow][move.fromColumn];
         board[move.fromRow][move.fromColumn] = null;
   }

   public boolean inCheck(Player p) {
       //If the player that isn't player p's King can be killed by a possible move by the other player
       //If player p is white, make player p2 black.
       //If player p is black, make player p2 white.
       
       for(int row = 0; row < 8; row++){
         for(int col = 0; col < 8; col++){
            if(pieceAt(row, col).player == p2){
            int fromRow = row;
            int fromCol = col;
               for(int row2 = 0; row2 < 8; row2++){
                  for(int col2 = 0; col2 < 8; col2++){
                     Move m = new Move(fromRow, fromCol, row2, col2);
                     if(isValid(m) && pieceAt(row2, col2).type().equals("King"))
                        return true;
                  }
               }
            }
         }
       }
       
       return false;
   }
   
   public Player currentPlayer() {
       return player;
   }
   
   public int numRows() {
       return 8;
   }
   
   public int numColumns() {
       return 8;
   }
   
   public IChessPiece pieceAt(int row, int col) {
       //return the index of the board at the given coordinates
       return board[row][col];
   }

   // add other public or helper methods as needed

}

